"""
Filename: results.py
Author: Santiago Nunez-Corrales
Date: 2025-08-06
Version: 1.0
Description:
    This file defines a model for results generated by task execution.

License: Apache 2.0
Contact: nunezco2@illinois.edu
"""
from enum import Enum
from typing import Dict, Optional, Literal
from pydantic import BaseModel, Field


class ResultType(str, Enum):
    """Results types produced by the backend.

    """
    CIRCUIT = "circuit"
    TEST = "test"
    CONTROL = "control"


class TaskResult(BaseModel):
    """Base class for all result types

    """
    task_id: str
    result_type: ResultType


class CircuitResult(TaskResult):
    """Circuits produce distributions of integer counts over bit strings

    """
    result_type: Literal[ResultType.CIRCUIT] = Field(default=ResultType.CIRCUIT)
    distribution: Dict[str, int]


class TestResult(TaskResult):
    """Tests yield named parameters with real values
    """
    result_type: Literal[ResultType.TEST] = Field(default=ResultType.TEST)
    parameters: Dict[str, float]


class ControlAck(TaskResult):
    """Control tasks produce QPU state changes with a status and message

    """
    result_type: Literal[ResultType.CONTROL] = Field(default=ResultType.CONTROL)
    status: str  # e.g., "ok" or "error"
    message: Optional[str] = None
